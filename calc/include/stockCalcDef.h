/*
*stockCalcDef.h
*/

#ifndef __STOCK_CALC_DEF_H__
#define __STOCK_CALC_DEF_H__

#include <dp.h>
#include <dllLibEx.h>
#include <taskDef.h>
#define	STOCK_CODE_NAME_MAX				32
#define	STOCK_AUTO_COUNTS_MAX			3800
#define STOCK_HIS_KLINE_MAX_COUNTS		80
#define STOCK_TRACE_DAYS_PER_HIS_UPDATE (7)	
#define STOCK_SECS_PER_DAY				(24*3600)
#define STOCK_SECS_PER_WEEKS			(STOCK_SECS_PER_DAY*7)

#define STOCK_WEEKS_LOST_BETWEEN_SECS(start, end) (((end)-(start)+STOCK_SECS_PER_WEEKS/2)/STOCK_SECS_PER_WEEKS)

struct STOCK_CODE_NAME
{
	char	code[STOCK_CODE_NAME_MAX];
	char	name[STOCK_CODE_NAME_MAX];
};

struct STOCK_MANAGER_TRACE_LOG
{
	UINT	traceStep;
	char	code[STOCK_CODE_NAME_MAX];
	long	highTime;
	float	fHighVal;
	long	buyTime;
	float	fBuyVal;
	long	sellTime;
	float	fSellVal;
	long	hisTime;
	long	updateTime;
};

enum STOCK_CALC_EVENT_CMD
{
	STOCK_CALC_EVENT_UPDATE_STOCK_LIST = 0x00000001,
	STOCK_CALC_EVENT_UPDATE_STOCK_LIST_RESP ,
	STOCK_CALC_EVENT_UPDATE_STOCK_HISKLINE,
	STOCK_CALC_EVENT_UPDATE_STOCK_HISKLINE_RESP,
	STOCK_CALC_EVENT_GET_STOCK_LIST,
	STOCK_CALC_EVENT_GET_STOCK_LIST_RESP ,
	STOCK_CALC_EVENT_LOAD_TRACE_LOG,
	STOCK_CALC_EVENT_LOAD_TRACE_RESP,
	STOCK_CALC_EVENT_UPDATE_TRACE_LOG,
};

enum STOCK_CALC_TRACE_STEP
{
	STOCK_CALC_TRACE_STEP_NONE = 0,
	CALC_STOCK_TRADE_STEP_CHECK_BALANCE_RAISE,
	CALC_STOCK_TRADE_STEP_CHECK_HIGH,
	CALC_STOCK_TRADE_STEP_WAIT_BUY,
	CALC_STOCK_TRADE_STEP_WAIT_SELL,
};

struct STOCK_CALC_TRACE_NODE
{
	DL_NODE						node;
	STOCK_MANAGER_TRACE_LOG		traceLog;
};

typedef TASK_EVENT_PARAM	STOCK_CALC_UPDATE_LIST;

struct STOCK_CALC_UPDATE_LIST_RESP
{
	TASK_EVENT_PARAM	eventParam;
	int					respResult;
};

struct STOCK_CALC_UPDATE_HISKLINE
{
	TASK_EVENT_PARAM	eventParam;
	char	code[STOCK_CODE_NAME_MAX];
	int		updateCycles;
	time_t  endTime;
};

struct STOCK_CALC_UPDATE_HISKLINE_RESP
{
	TASK_EVENT_PARAM	eventParam;
	int		respResult;
};

struct STOCK_CALC_GET_LIST
{
	TASK_EVENT_PARAM	eventParam;
	UINT				bufCounts;
	STOCK_CODE_NAME*	pListBuf;
};

struct STOCK_CALC_GET_LIST_RESP
{
	TASK_EVENT_PARAM	eventParam;
	int					respResult;
};

struct STOCK_CALC_LOAD_TRACELOG
{
	TASK_EVENT_PARAM	eventParam;
	UINT				bufCounts;
	STOCK_MANAGER_TRACE_LOG*	pLogBuf;
};

struct STOCK_CALC_LOAD_TRACELOG_RESP
{
	TASK_EVENT_PARAM	eventParam;
	int					respResult;
};

struct STOCK_CALC_UPDATE_TRACELOG
{
	TASK_EVENT_PARAM	eventParam;
	STOCK_MANAGER_TRACE_LOG	traceLog;
};

struct STOCK_MANAGER_JOB_LIST
{
	UINT    jobStep;
	UINT	stockCounts;
	STOCK_CODE_NAME	codeName[0];
};
struct STOCK_MANAGER_JOB_LIST_UPDATE
{
	UINT    jobStep;
};

struct STOCK_MANAGER_JOB_TRACELOG_LOAD
{
	UINT    jobStep;
	int		logCounts;
	STOCK_MANAGER_TRACE_LOG traceLog[0];
};

struct STOCK_MANAGER_JOB_HISKLINE_UPDATE
{
	UINT	jobStep;
	int		stockIdx;
};


#endif // !__STOCK_CALC_DEF_H__
